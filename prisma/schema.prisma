generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  name          String          @default("usuario007")
  password      String
  role          UserRole
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  PurchaseOrder PurchaseOrder[]
  sales         Sale[]
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
}

model Product {
  id                Int                 @id @default(autoincrement())
  name              String
  price             Float
  stock             Int
  minStock          Int                 @default(5)
  description       String?
  image             String?
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  categoryId        Int
  supplierId        Int
  category          Category            @relation(fields: [categoryId], references: [id])
  supplier          Supplier            @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  PurchaseOrderItem PurchaseOrderItem[]
  saleItems         SaleItem[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  products  Product[]
}

model Sale {
  id        Int        @id @default(autoincrement())
  date      DateTime   @default(now())
  total     Float
  orden     Int
  clientId  Int
  userId    Int
  paymentId Int
  status    SaleStatus @default(PENDING)
  client    Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  payment   Payment    @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     SaleItem[]
}

model SaleItem {
  id        Int     @id @default(autoincrement())
  saleId    Int
  productId Int
  quantity  Int
  price     Float
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sale      Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model Payment {
  id        Int           @id @default(autoincrement())
  method    PaymentType
  reference String?
  paidAt    DateTime      @default(now())
  amount    Float
  status    PaymentStatus @default(PENDING)
  Sale      Sale[]
}

model PurchaseOrder {
  id          Int                 @id @default(autoincrement())
  supplierId  Int
  createdById Int
  date        DateTime            @default(now())
  status      OrderStatus
  total       Float
  createdBy   User                @relation(fields: [createdById], references: [id])
  supplier    Supplier            @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  items       PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id        Int           @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  unitPrice Float
  order     PurchaseOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Supplier {
  id          Int             @id @default(autoincrement())
  name        String
  contactName String?
  email       String?
  phone       String?
  address     String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  products    Product[]
  orders      PurchaseOrder[]
}

enum OrderStatus {
  PENDING
  SENT
  RECEIVED
  CANCELLED
}

enum UserRole {
  ADMIN
  SELLER
  MANAGER
}

enum SaleStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentType {
  CASH
  CARD
  TRANSFER
  DIGITAL_WALLET
}
